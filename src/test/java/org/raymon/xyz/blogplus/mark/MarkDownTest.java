package org.raymon.xyz.blogplus.mark;

import com.vladsch.flexmark.ast.Node;
import com.vladsch.flexmark.html.HtmlRenderer;
import com.vladsch.flexmark.parser.Parser;
import com.vladsch.flexmark.util.options.MutableDataSet;

/**
 * Created by lilm on 18-3-15.
 */
public class MarkDownTest {
	
	private static String text = "> 总感觉每一年过去不写点年终总结什么的话，一年就跟白过了似的。 —— 鲁迅\n" +
			"\n" +
			"<!--more-->\n" +
			"\n" +
			"![](/images/luxun.jpg)\n" +
			"\n" +
			"## 工作还需努力\n" +
			"\n" +
			"17年2月换了个新的工作环境，新公司的产品方向，对我来说是之前完全陌生的运维监控开发领域，与普通业务领域不同的是，运维产品开发并不以人作为首要业务对象，而是以服务器主机、数据库、中间件、应用等作为业务对象，其实来公司之前已经接触过一些运维类型的产品，如国外的<code>NewRelic</code>，国内的<code>OneAPM</code>，这类应用性能管理产品可以有效的帮助我们实时监控我们部署在服务器上的应用，大到应用整体的健康状况，小到系统一个sql的执行速度和结果，都能给予我们最直观的展示，极大的缩减了研发排查线上问题的耗费时间，帮助我们快速的定位系统缺陷。而我到公司之后接手是一款更加偏向运维的产品——Monitor，Monitor是一款秒级云监控系统，主要功能有（不是广告= =）：\n" +
			"1. 支持服务器主机(Windows,Linux[多种发行版本支持],Unix)，多种主流数据库，主流中间件的性能数据采集;\n" +
			"2. 实时秒级采集机器性能数据上报，大数据存储以及多维汇聚数据展示;\n" +
			"3. 配置告警规则，包括短信、邮件等多种方式的告警通知;\n" +
			"4. 性能报表自动生成以及导出，保留历史报表性能数据;\n" +
			"5. 分布式集群部署，全天候稳定运行。\n" +
			"\n" +
			"回顾自己这一年过来，经历过通宵产品发布，也有过因为自己的代码考虑不够全面，导致部署上去之后产品崩盘，然后通宵补救的经历，这些经历对我来说总结下来分为三个方面\n" +
			"\n" +
			"### 代码自查\n" +
			"\n" +
			"* 在功能自测完进行一次整体review;\n" +
			"* 在代码提交时挨个文件检查一遍，每一处修改自问一遍是否还有其他优化。\n" +
			"\n" +
			"进行完这两次review之后方可提交代码，虽然比较麻烦，却是必要的自我检查，做到对自己写下的代码负责，让自己的代码更加健壮。\n" +
			"\n" +
			"### 项目问题\n" +
			"\n" +
			"* 分布式事务处理\n" +
			"微服务架构下虽然加强了架构稳定性，各个模块之间解耦，却也加大了事务处理的难度，相比单机事务来说，分布式事务由于涉及到多个模块之间的数据变更，场景变得更加复杂了，参考了目前业内常用的TCC(Try/Confirm/Cancle)、2PC(两阶段提交)、消息通知解耦等解决方案之后，考虑到目前产品架构的activemq功能较为单一，且各模块涉及分布式事务场景并不多，最后选择了重试补偿机制来处理这个场景，即事务发生模块只需完成本身事务保留凭证，并调用对应模块RPC接口，若对应接口发生异常或模块不可用时，则将消息存放在redis定长队列，定时重试，并每天进行一次各模块的数据补偿检查，以达到数据的最终一致性;\n" +
			"\n" +
			"* Activemq数据积压\n" +
			"Activemq不稳定可以说一直是我们项目的一个顽疾，消息通知中间件应该是用来不同系统、不同模块之间的消息通知业务解耦，但是现在系统里却被用来承担一部分业务峰值缓冲的作用，导致我们产品之前的MQ动不动就被大数据量冲挂掉，稳定性极差。目前我们正在一步步移除掉这些缓冲队列，改为使用性能更优的redis队列来实现指标数据缓冲，并增强消息消费速度，同时也对Activemq管理页面进行了监控性监测，实现mq数据堆积过高时不再推送mq消息，以免冲垮mq，对mq的配置也进行了优化以提高mq的消息处理性能（调大mq堆内存，抛弃默认死信队列，传输协议改为nio等）;\n" +
			"\n" +
			"* 微服务模块划分过细\n" +
			"整个系统后端被划分为八个微服务模块，其实其中有多个模块是可以合并到一个模块的，过细的划分增加各个服务之间交互的网络延迟，每个模块都需独立进程启动也增加了系统消耗，同时一些相互严重依赖的模块由于被分离，把单机事务变成了分布式事务，导致几个模块之间会出现数据状态不一致的情况，这也是前面提到的分布式事务场景出现的原因。\n" +
			"\n" +
			"* 后端接口不规范\n" +
			"接口返回没有进行统计封装，每个接口返回的格式也不同，有的返回布尔值，有的接口什么也不返回，有的是数组，有的是对象，接口的可复用性很差，往往一个接口可以实现的功能却被堆出来多个接口，同时也缺少一份全面完善的接口文档，这些问题导致系统的维护性差，前端对接接口困难，老员工走之后新手很难快速接手项目。\n" +
			"一个优雅的后端接口，应该有统一的参数返回，完善的接口文档，中英文的报错提示以及ErrorCode，和对Uncheck异常的统一捕获记录。\n" +
			"\n" +
			"* Redis Keys\n" +
			"公司平台组曾发现在系统客户现场运行一段时间之后发现登录异常缓慢，经进一步排查之后发现是Redis出现响应卡顿，最终问题定位在Redis Keys命令上，这个命令由于会检查匹配redis所有的key，当数据量变大时将会使单线程的redis出现卡顿，cpu使用率陡增，拖慢整个redis的性能，替代方案是使用基于游标的迭代器SCAN命令，每次执行只会返回少量元素，而不会像KEYS和SMEMBERS命令一样存在阻塞服务器的隐患。\n" +
			"\n" +
			"### 自身提高\n" +
			"\n" +
			"去年整年感觉自己的进步速度在变缓，感觉就像是翻过了一座山之后，却发现这座山之后还有无数座更高更险的陡峰，而自己对这些陡峰都还仅仅是知道名字而已，时序数据库存储，key-value数据库Cassandra，分布式系统，RPC框架Dubbo，应用服务协调中间件Zookeeper和它的各种应用场景（分布式配置维护，服务发布，主节点选举），mysql主主同步，Redis哨兵模式，Netty网络框架编程，不说了，看书撸代码去了\uD83D\uDE23。\n" +
			"\n" +
			"---\n" +
			"\n" +
			"## 生活还在继续\n" +
			"\n" +
			"自打毕业开始工作以来，时间是过的越发的快了，以前读书的时候，时间是一天一天过的；现在成为打工仔之后，时间变成一周一周的过了，总是在望着周末望着放假，却也不是工作太累或者说工作不够顺心，只是喜欢假日里自由的那种感觉，因此每到放假总要带着女盆友出门浪浪，即使是没有任何目的性的瞎逛\uD83D\uDE02，一年下来也去过了不少地方：\n" +
			"\n" +
			"* 02-15 ~ 02-20\n" +
			"带着我妮妮(•́⌄•́๑)૭✧去了一趟<strong>婺源</strong>，久闻中国最美乡村的大名，果然是名不虚传，我们去的时候正好是赶上油菜花刚开，加上既不是假期又不是旅游旺季，因此整个乡村显得十分静谧幽美，如同是一副多彩的中国山水画一般展现在我们面前，从山坡上望下去，炊烟在晨雾中缈缈升起，一大片一大片翠黄的油菜花满铺在连绵的丘陵之上，让人直叹不虚此行。\n" +
			"\n" +
			"* 清明节\n" +
			"西湖龙井村一日游，好吃的农家红烧鱼\uD83D\uDE0B\n" +
			"\n" +
			"* 五一小长假\n" +
			"东极岛之行，位于中国最东边的一座小岛，第一缕阳光升起的地方，一个字——美！住在海景房，散步在环岛小路上，抹黑起床，两个人背着床单坐在礁石上，看五月的第一次日出，吹着凉凉的海风，时间过的那么慢那么美好~\n" +
			"\n" +
			"* 05-12 ~ 05-19\n" +
			"带爸妈，舅妈，姨妈杭州一周游，爸妈第一次见到了天天念叨的儿媳妇，小妮砸表现不错。\n" +
			"\n" +
			"* 沉闷的夏天~~~\n" +
			"\n" +
			"* 国庆节\n" +
			"国庆大迁徙来咯，十一带妮妮回家见父母咯，先是和她提着满手的礼物去她家，拜见了妮妮的父母，亲切会唔了她家的亲戚们，住了两天之后再由南昌出发到长沙，在南昌的地铁上看到滕王阁站，便临时起意，拖着行李箱，滕王阁一上午游~\n" +
			"两个小时高铁加转车之后，来到我家，又是拜见父母，会见亲朋，喝酒吃饭，待了三天之后，长沙一日游，橘子洲、岳麓山、坡子街，臭豆腐、口味虾（吃完第二天起了一身痘(┬＿┬)），长沙玩的心满意足之后回到了杭州，但是，行程还没有结束\uD83D\uDE02，第二天我们又背上行李，开启了上海迪斯尼三天两夜之旅，伴随着迪斯尼压轴的烟花结束了十一的奔波。\n" +
			"\n" +
			"* 11-24 ~ 12-10\n" +
			"在父母的帮助之下赶在房价继续上涨之前买房了，巨款首付，巨额贷款，心情复杂\uD83D\uDE41。\n" +
			"长沙项目出差两周，作为一个湖南人，除了长沙，去哪出差都行啊，没法儿，老板给钱老板最大，解决完现场客户问题之后，赶在双十二妮妮生日之前回杭州咯。\n" +
			"\n" +
			"---\n" +
			"\n" +
			"## 新的目标\n" +
			"\n" +
			"最后照惯例列一下自己新一年的小目标吧\n" +
			"- 深入学习<code>Netty</code>网络编程，Debug学习源码;\n" +
			"- 提高<code>Shell</code>脚本编写能力;\n" +
			"- 对<code>JS</code><code>Python</code>进一步了解，做一个小网站，学一个小爬虫(其实我还想学<code>Scala</code>);\n" +
			"- 掌握<code>ElasticSearch</code>数据结构以及数据优化、集群方案并写一篇博客总结;\n" +
			"- 入个单反，玩玩摄影;\n" +
			"- 多出去几个地方旅游，次数不限。\n" +
			"\n" +
			"小目标列列就好咯，能不能实现另说咯，万一实现了呢~\n";
	
	public static void main(String[] args) {
		MutableDataSet options = new MutableDataSet();
		
		// uncomment to set optional extensions
		//options.set(Parser.EXTENSIONS, Arrays.asList(TablesExtension.create(), StrikethroughExtension.create()));
		
		// uncomment to convert soft-breaks to hard breaks
		//options.set(HtmlRenderer.SOFT_BREAK, "<br />\n");
		
		Parser parser = Parser.builder(options).build();
		HtmlRenderer renderer = HtmlRenderer.builder(options).build();
		
		// You can re-use parser and renderer instances
		Node document = parser.parse(text);
		String html = renderer.render(document);  // "<p>This is <em>Sparta</em></p>\n"
		System.out.println(html);
	}
}
